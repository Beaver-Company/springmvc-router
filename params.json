{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Adds route mapping capacity to any \"Spring MVC based\" webapp. Uses playframework.org Router implementation.","body":"SpringMVC Router is built on Travis [![Build Status](https://secure.travis-ci.org/resthub/springmvc-router.png?branch=master)](http://travis-ci.org/resthub/springmvc-router)\r\n\r\nDevelopers mailing list: resthub-dev@googlegroups.com\r\n\r\nRoute mapping with SpringMVC Router\r\n-----------------------------------\r\n\r\nSpring MVC 3.1 [handles requests mapping](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html) with `RequestMappingHandlerMapping` and `RequestMappingHandlerAdapter` beans (that's the \"out-of-the-box\" configuration that comes with your springmvc application).\r\n\r\nBut you may want to use a request Router for your application:\r\n\r\n* Route Configuration is centralized in one place (you don't need to look into your controllers anymore) \r\n* URL Refactoring is easier\r\n* Many web frameworks  use that system (Rails, PlayFramework and many others)\r\n* Handles routes priority \r\n\r\n\r\nDefine your application routes like this!\r\n\r\n    GET     /user/?                 userController.listAll\r\n    GET     /user/{<[0-9]+>id}      userController.showUser\r\n    DELETE  /user/{<[0-9]+>id}      userController.deleteUser\r\n    POST    /user/add/?             userController.createUser\r\n\r\n\r\nConfiguring the SpringMVC Router for your project\r\n-------------------------------------------------\r\n\r\n### Add the dependency to your maven pom.xml\r\n\r\nWarning: **this project is currently tested on Spring 3.1.x**, and is not compatible with Spring 3.0.x - your project needs these dependencies.\r\n  \r\n\r\n    <dependencies>\r\n    ...\r\n      <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-aop</artifactId>\r\n        <version>${spring-version}</version>\r\n      </dependency>\r\n      <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-beans</artifactId>\r\n        <version>${spring-version}</version>\r\n      </dependency>\r\n      <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-webmvc</artifactId>\r\n        <version>${spring-version}</version>\r\n      </dependency>\r\n    ...\r\n      <dependency>\r\n        <groupId>org.resthub</groupId>\r\n        <artifactId>springmvc-router</artifactId>\r\n        <version>0.8-SNAPSHOT</version>\r\n      </dependency>\r\n    ...\r\n    </dependencies>\r\n\r\nIf you want to use SNAPSHOTs, add oss.sonatype.org as a repository.\r\n\r\n    <repositories>\r\n      <repository>\r\n        <id>sonatype.oss.snapshots</id>\r\n          <name>Sonatype OSS Snapshot Repository</name>\r\n          <url>http://oss.sonatype.org/content/repositories/snapshots</url>\r\n          <releases>\r\n            <enabled>false</enabled>\r\n          </releases>\r\n          <snapshots>\r\n            <enabled>true</enabled>\r\n          </snapshots>\r\n      </repository> \r\n    </repositories>\r\n\r\n\r\n### Add the Router to your Spring MVC configuration\r\n\r\nIn your *-servlet.xml file, add the following beans:\r\n\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n    <beans  xmlns=\"http://www.springframework.org/schema/beans\"\r\n                    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n                    xmlns:context=\"http://www.springframework.org/schema/context\"\r\n                    xmlns:tx=\"http://www.springframework.org/schema/tx\"\r\n                    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\r\n                    xmlns:p=\"http://www.springframework.org/schema/p\"\r\n                    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd\r\n                        http://www.springframework.org/schema/context\r\n                        http://www.springframework.org/schema/context/spring-context-3.1.xsd\r\n                        http://www.springframework.org/schema/tx\r\n                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd\">\r\n    \r\n      <!--\r\n        Enable bean declaration by annotations, update base package according to your project\r\n      -->\r\n      <context:annotation-config/>\r\n    \r\n    \r\n    \t<!--\r\n    \t\tPackage to scan for Controllers.\r\n    \t\tAll Controllers with @Controller annotation are loaded as such.\r\n    \t-->\r\n    \t<context:component-scan base-package=\"com.example.yourproject.controllers\" />\r\n    \r\n    \t<!-- \r\n    \t\tChoose HandlerMapping.\r\n    \t\tRouterHandlerMapping loads routes configuration from a file.\r\n    \t\tRouter adapted from Play! Framework.\r\n    \t\t\r\n    \t\t@see http://www.playframework.org/documentation/1.2.4/routes#syntax\r\n    \t\tfor route configuration syntax.\r\n    \t\tExample:\r\n    \t\tGET    /home          PageController.showPage(id:'home')\r\n    \t\tGET    /page/{id}     PageController.showPage\r\n    \t-->\r\n    \t\t \r\n    \t<bean id=\"handlerMapping\"\r\n              class=\"org.resthub.web.springmvc.router.RouterHandlerMapping\">\r\n                <property name=\"routeFiles\">\r\n                    <list>\r\n                        <value>routes.conf</value>\r\n                    <!--\r\n                        Router will *append* routes declared in additional files\r\n                        <value>addroutes.conf</value>\r\n                    -->\r\n                    </list>\r\n                </property>\r\n    \t\t<property name=\"servletPrefix\" value=\"\" />\r\n                <!-- \r\n                    Uncomment the following configuration line\r\n                    if you want routes to be dynamically reloaded when\r\n                    route files are modified.\r\n                    Can be a good idea in dev mode, not so much in production!\r\n                -->\r\n                <!-- <property name=\"autoReloadEnabled\" value=\"true\" /> -->\r\n        </bean>\r\n    \r\n    </beans>\r\n\r\n\r\n### Create your route configuration file\r\n\r\n\r\nThe example above will load the configuration file using Spring ResourceLoader - so create a new file in your project `src/main/resources/routes.conf`.\r\n\r\nRoutes configuration\r\n--------------------\r\n\r\nThe router maps HTTP request to a specific action (i.e. a public method of a Controller class handling requests).\r\n\r\n### Get your first Controller ready!\r\n\r\nControllers can use [Spring MVC annotations and conventions](http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/mvc.html) - only the `@RequestParam` annotation is useless.\r\n\r\n\r\n    @Controller\r\n    public class HelloController {\r\n      public void simpleAction() {\r\n      \r\n      }\r\n    \t\r\n      public @ResponseBody String sayHelloTo(@PathVariable(value = \"name\") String name) {\r\n        return \"Hello \"+name+\" !\";\t  \r\n      }\r\n    }\r\n\r\n\r\n\r\n### Edit your route configuration file\r\n\r\n**Warning: in the route configuration file, Controller names are case sensitive, and should always start with a lower case letter.**\r\n\r\n\r\n    # this is a comment\r\n    \r\n    GET     /simpleaction                  helloController.simpleAction\r\n    GET     /hello/{<[a-zA-Z]+>name}       helloController.sayHelloTo\r\n\r\n\r\nFor more details on routes syntax, [check out the PlayFramework documentation](http://www.playframework.org/documentation/1.2.4/routes).\r\n\r\n\r\nView Integration\r\n----------------\r\n\r\nRouting requests to actions is one thing. But refactoring routes can be a real pain if all your URLs are hard coded in your template views. Reverse routing is the solution.\r\n\r\n\r\n### Reverse Routing\r\n\r\nExample route file:\r\n\r\n    GET     /user/?                 userController.listAll\r\n    GET     /user/{<[0-9]+>id}      userController.showUser\r\n    DELETE  /user/{<[0-9]+>id}      userController.deleteUser\r\n    POST    /user/add/?             userController.createUser\r\n\r\n\r\nReverse routing in your Java class:\r\n\r\n    import org.resthub.web.springmvc.router.Router;\r\n    \r\n    public class MyClass {\r\n      public void myMethod() {\r\n        \r\n        ActionDefinition action = Router.reverse(\"userController.listAll\");\r\n        // logs \"/user/\"\r\n        logger.info(action.url);\r\n    \r\n        HashMap<String, Object> args = new HashMap<String, Object>();\r\n        args.put(\"id\",42L);\r\n        ActionDefinition otherAction = Router.reverse(\"userController.showUser\", args);\r\n        // logs \"/user/42\"\r\n        logger.info(otherAction.url);\r\n      }\r\n    }\r\n\r\n\r\n### Integrating with Velocity\r\n\r\nFirst, add the RouteDirective to your Velocity Engine configuration:\r\n\r\n    <!--\r\n      Configure your Velocity Template engine.\r\n      Add the custom directive to the engine.  \r\n    -->\r\n    <bean id=\"velocityConfig\"\r\n      class=\"org.springframework.web.servlet.view.velocity.VelocityConfigurer\">\r\n      <property name=\"resourceLoaderPath\" value=\"classpath:velocity\" />\r\n      <property name=\"preferFileSystemAccess\" value=\"false\"/>\r\n      <property name=\"velocityProperties\">\r\n        <props>\r\n          <prop key=\"userdirective\">org.resthub.web.springmvc.view.velocity.RouteDirective</prop>\r\n        </props>\r\n      </property>\r\n    </bean>\r\n\r\nThen use the #route directive within your .vm file:\r\n\r\n    <a href=\"#route(\"userController.listAll\")\">List all users</a>\r\n    <a href=\"#route(\"userController.showUser(id:'42')\")\">Show user 42</a>\r\n\r\n### Integrating with FreeMarker\r\n\r\nIn your Spring MVC context add the following:\r\n\r\n    <mvc:interceptors>\r\n        <bean class=\"org.resthub.web.springmvc.view.freemarker.RouterModelAttribute\"/>\r\n    </mvc:interceptors>\r\n\r\nThis will inject a model attribute called \"route\" to every model. The attribute name can be modified by setting the\r\nproperty \"attributeName\".\r\n\r\n    <mvc:interceptors>\r\n        <bean class=\"org.resthub.web.springmvc.view.freemarker.RouterModelAttribute\">\r\n            <property name=\"attributeName\" value=\"myAttributeName\"/>\r\n        </bean>\r\n    </mvc:interceptors>\r\n\r\nThen use the Router instance within your .ftl files:\r\n\r\n    <a href=\"${route.reverse('userController.listAll')}\">List all users</a>\r\n\r\n    <#assign params = {\"id\":42}/>\r\n    <a href=\"${route.reverse('userController.showUser', params)}\">Show user 42</a>\r\n\r\nTools\r\n-----\r\n\r\n### Autocomplete reverse routing in your IDE\r\n\r\n[springmvc-router-ide](https://github.com/bradhouse/springmvc-router-ide) is a Maven plugin to generate template files that assist IDEs in autocompleting reverse routing with this project.\r\n\r\n### RESThub framework\r\n\r\nThis project can be used as an addon to [RESThub framework](http://resthub.org/2).\r\n","google":"","name":"Springmvc-router"}